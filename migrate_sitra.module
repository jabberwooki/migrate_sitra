<?php
/**
 * @file 
 * @author Christophe Espiau <christophe.espiau@korora.fr>
 * @license GPL
 * @license http://opensource.org/licenses/gpl-license.php GNU Public License
 *
 */


/**
 * Implements hook_menu().
 */
function migrate_sitra_menu() {
	$items = array();

	$items['admin/content/migrate_sitra'] = array(
		'title' => 'Sitra',
		'description' => 'Sitra notifications',
		'page callback' => 'migrate_sitra_notifications',
		'access callback' => TRUE,
		'file' => 'migrate_sitra.pages.inc',
    'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
    'weight' => 10,
	);
  $items['admin/content/migrate_sitra/notifications'] = array(
    'title' => 'Notifications',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 5,
  );
	
	$items['admin/content/migrate_sitra/exported_files'] = array(
		'title' => 'Exported files',
		'description' => 'Sitra exported files stored locally',
		'page callback' => 'migrate_sitra_exported_files',
		'access callback' => TRUE,
		'file' => 'migrate_sitra.pages.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
	);
	
  // Administration page.
//   $items['admin/config/sitra'] = array(
//    'title' => 'Sitra settings',
//    'description' => 'Configure Sitra imports.',
//    //'position' => 'left',
//    'page callback' => 'drupal_get_form',
//    'page arguments' => array('sitra_admin_settings'),
//    'access arguments' => array('administer Sitra'),
//    'file' => 'sitra.admin.inc',
//   );
	
	$items['sitra-notifications'] = array(
		'title' => 'Sitra2 notifications',
		'description' => 'PHP webservice to receive Sitra2 exports notifications',
		'page callback' => 'migrate_sitra_execute_ws_call',
		'access callback' => 1,
		'access arguments' => array('access content'),
		'file' => 'migrate_sitra.ws.inc',
		'type' => MENU_CALLBACK,
	);

	$items['sitra_import'] = array(
			'title' => 'Sitra2 import',
			'description' => 'Launches import from exported files archive',
			'page callback' => 'sitra_launch_import',
			'access callback' => 1,
			'access arguments' => array('access content'),
			'type' => MENU_CALLBACK,
	);
	
	return $items;
}

function sitra_launch_import() {
	// Get the oldest non imported archive infos.
	$archive_data = db_select('migrate_sitra_exported','mse')
		->fields('mse', array('fid','path'))
		->condition('imported', '0')
		->orderBy('path','ASC')
		->execute()->fetch();
	
	// There is no unimported archive, so nothing to do.
	if (!isset($archive_data->path)) {
		watchdog('sitra imports', t('There is not export archive available for import'));
		dsm(t('No export archive available for import.'));
	}
	// At least one unimported archive is available
	else {
		dsm(t('One export archive is available for import.'));
		$extract_location = 'public://sitra-imports';
		// We must first empty the extract location.
		// 1- If the cleaning of extract location cleaning succeeds, we can run the import process.
		if (file_unmanaged_delete_recursive($extract_location)) {
			watchdog('sitra imports', t("Directory 'sitra-imports' cleaned."));
			dsm(t("Directory 'sitra-imports' cleaned."));
		
			// 1.1- The export archive is deflated.
			$archiver = archiver_get_archiver($archive_data->path);
			$archiver->extract($extract_location);
			
			// 1.2a - FOR IMPORT TESTING ONLY
			$sitra_object = arg(1);
			$limit = arg(2);
			if (isset($sitra_object)) {
				dsm('param = ' . $sitra_object);
				$migrations = migrate_migrations();
				if (array_key_exists($sitra_object, $migrations)) {
					dsm(t('Migration !key exists.', array('!key' => $sitra_object)));
					$migration = Migration::getInstance($sitra_object);
					$migration->prepareUpdate();
					if (isset($limit)) {
						if (is_int($limit)) {
							$options['limit']['value'] = $limit;
							$options['limit']['unit'] = 'items';
							$result = $migration->processImport($options);
							$msg = t('%sitra_object import result : %result', array('%sitra_object' => strtoupper($sitra_object), '%result' => $result));
						}
						else {
							$msg = t('!limit is not an integer. Import failed.', array('!limit' => $limit));
						}
					}
					else {
						$result = $migration->processImport();
						$msg = t('%sitra_object import result : %result', array('%sitra_object' => strtoupper($sitra_object), '%result' => $result));
					}
					watchdog('sitra imports', $msg);
					dsm($msg);
				}
				else {
					dsm(t('Migration !key doesn\'t exist. Import failed.', array('!key' => $sitra_object)));
				}
			}
			else {
				// 1.2b - FOR REAL IMPORTS
				// We launch all defined migrations, one after each other.
				$migrations = migrate_migrations();
				foreach ($migrations as $key=>$migration_info) {
					$migration = Migration::getInstance($key);
					$migration->prepareUpdate();
					$result = $migration->processImport();
					$msg = t('!sitra_object import result : !result', array('!sitra_object' => strtoupper($key), '!result' => $result));
					watchdog('sitra imports', $msg);
					dsm($msg);
				}
				
				// 4- Finally, we update the 'imported' value in 'migrate_sitra_exported' database table.
				db_update('migrate_sitra_exported')
				->fields(array('imported' => 1))
				->condition('fid', $archive_data->fid)
				->execute();				
			}
		}
		// 2- If the cleaning of extract location cleaning fails, we can't do anything.
		else {
			watchdog('sitra imports', t("Directory 'sitra-imports' cleaning failed."));
			dsm(t("Directory 'sitra-imports' cleaning failed."));
		}
	}
	return t('Import process terminated.');
}

/**
 * Implements hook_cron()
 */
function migrate_sitra_cron() {
	sitra_launch_import();
}