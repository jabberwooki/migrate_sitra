<?php
/**
 * @file 
 * @author Christophe Espiau <christophe.espiau@korora.fr>
 * @license GPL
 * @license http://opensource.org/licenses/gpl-license.php GNU Public License
 *
 */


/**
 * Implements hook_menu().
 */
function migrate_sitra_menu() {
	$items = array();

	$items['admin/content/migrate_sitra'] = array(
		'title' => 'Sitra',
		'description' => 'Sitra notifications',
		'page callback' => 'migrate_sitra_notifications',
		'access callback' => TRUE,
		'file' => 'migrate_sitra.pages.inc',
    'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
    'weight' => 10,
	);
  $items['admin/content/migrate_sitra/notifications'] = array(
    'title' => 'Notifications',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 5,
  );
	
	$items['admin/content/migrate_sitra/exported_files'] = array(
		'title' => 'Exported files',
		'description' => 'Sitra exported files stored locally',
		'page callback' => 'migrate_sitra_exported_files',
		'access callback' => TRUE,
		'file' => 'migrate_sitra.pages.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
	);
	
  // Administration page.
//   $items['admin/config/sitra'] = array(
//    'title' => 'Sitra settings',
//    'description' => 'Configure Sitra imports.',
//    //'position' => 'left',
//    'page callback' => 'drupal_get_form',
//    'page arguments' => array('sitra_admin_settings'),
//    'access arguments' => array('administer Sitra'),
//    'file' => 'sitra.admin.inc',
//   );
	
	$items['sitra-notifications'] = array(
		'title' => 'Sitra2 notifications',
		'description' => 'PHP webservice to receive Sitra2 exports notifications',
		'page callback' => 'migrate_sitra_execute_ws_call',
		'access callback' => 1,
		'access arguments' => array('access content'),
		'file' => 'migrate_sitra.ws.inc',
		'type' => MENU_CALLBACK,
	);

	$items['sitra_import'] = array(
			'title' => 'Sitra2 import',
			'description' => 'Launches import from exported files archive',
			'page callback' => 'sitra_launch_import',
			'access callback' => 1,
			'access arguments' => array('access content'),
			'type' => MENU_CALLBACK,
	);
	
	return $items;
}


function export_archive_unzip($archive=null) {
	
// 	$archive_data = db_select('migrate_sitra_exported','mse')
// 		->fields('mse', array('fid','path'))
// 		->condition('imported', '0')
// 		->orderBy('path','ASC')
// 		->execute()->fetch();
	
// 	if (isset($archive_data->path)) dsm('ok');
// 	else dsm ('vide');
// 	dsm($archive_data);

// 	$archiver = archiver_get_archiver($archive_data->path);
// 	$extract_location = 'public://sitra-imports';
	
// 	$archiver->extract($extract_location);
	
// 	db_update('migrate_sitra_exported')
// 	->fields(array('imported' => 1))
// 	->condition('fid', $archive_data->fid)
// 	->execute();

	return 'toto';
}

function sitra_launch_import() {
	// Get the oldest non imported archive infos.
	$archive_data = db_select('migrate_sitra_exported','mse')
		->fields('mse', array('fid','path'))
		->condition('imported', '0')
		->orderBy('path','ASC')
		->execute()->fetch();
	
	if (!isset($archive_data->path)) {
		watchdog('sitra imports', t('There is not export archive available for import'));
		//dsm('0 archive à importer');
		//return "aucun fichier à importer"; //'fonction sitra_launch_import';
	}
	else {
		$extract_location = 'public://sitra-imports';
		// 1- We must first empty the extract location.
		if (file_unmanaged_delete_recursive($extract_location)) {
			watchdog('sitra imports', t("Directory 'sitra-imports' cleaned."));
		
			// 2- The export archive is deflated.
			$archiver = archiver_get_archiver($archive_data->path);
			$archiver->extract($extract_location);
		
			// 3- We launch all defined migrations, one after each other.
			$migrations = migrate_migrations();
			foreach ($migrations as $key=>$migration_info) {
				$migration = Migration::getInstance($key);
				$result = $migration->processImport();
				watchdog('sitra imports', t('%sitra_object import result : %result', array('%sitra_object' => strtoupper($key), '%result' => $result)));
			}
		
			// 4- Finally, we update the 'imported' value in 'migrate_sitra_exported' database table.
			db_update('migrate_sitra_exported')
			->fields(array('imported' => 1))
			->condition('fid', $archive_data->fid)
			->execute();
		}
		else {
			watchdog('sitra imports', t("Directory 'sitra-imports' cleaning failed."));
			//return;
		}
	}
}

/**
 * Implements hook_cron()
 */
function migrate_sitra_cron() {
	sitra_launch_import();
}